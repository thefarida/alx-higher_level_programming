============================
Mode of 0-add_integer.py
============================

Import module:
==============
        >>> add_integer = __import__('0-add_integer').add_integer


Function:
=========
Writes a function that add 2 integers.


Operations:
'a' and 'b' must be integers or floats, else raise a TypeError exception
with the message 'a must be an integer' or 'b must be an integer'.


Non-Parameters
==============


Test #0: Test case without parameters

        >>> add_integer()
        Traceback (most recent call last):
        TypeError: add_integer() missing positional argument: 'a'

Test #1: Test case for an argument with unassigned value
        >>> add_integer(a, 100)
        Traceback (most recent call last):
        NameError: name 'a' is not defined

Test #2: Test case for using the default value of parameter 'b'
        >>> add_integer(3)
        101

Test #3: Test case for using the default value of parameter 'b'
with a float parameter 'a'
        >>> add_integer(2.0, )
        100


Numbers
=======

Test #4: Test case between two integers
        >>> add_integer(2, 2)
        4

Test #5: Test case between two floats
        >>> add_integer(3.0, 17.0)
        20

Test #6: Test case between an integer and a float
        >>> add_integer(4, 13.0)
        17

Test #7: Test case between a float and an integer
        >>> add_integer(8.0, 4)
        12

Test #8: Test case between negative values
        >>> add_integer(-5.5, -6)
        -11

Test #9: Test case between float and negative integer
        >>> add_integer(34.5, -5)
        29

Test #10: Test case between integer and infinty float
        >>> add_integer(2, 1e400)
        Traceback (most recent call last):
        OverflowError: cannot convert infinity float to integer

Test #11: Test case between infinity float and negative integer
        >>> add_integer(99e99999, -4)
        Traceback (most recent call last):
        OverflowError: cannot convert infinity float to integer

Non-Numbers
===========

Test #12: Test case with first parameter of type 'None'
        >>> add_integer(None, 19)
        Traceback (most recent call last):
        TypeError: a must be an integer

Test #13: Test case with second parameter of type 'None'
        >>> add_integer(19, None)
        Traceback (most recent call last):
        TypeError: b must be an integer

Test #14: Test case with first parameter of type 'str'
        >>> add_integer("Hello", 8)
        Traceback (most recent call last):
        TypeError: a must be an integer

Test #15: Test case with the second parameter of type 'list'
        >>> add_integer(8, [3, 4])
        Traceback (most recent call last):
        TypeError: b must be an integer


Types
=====

Test #16: Test case to check the type
        >>> type(add_integer(5, 5))
        <class 'int'>
